<?php

namespace Model;

use Service\Db;
use Service\Firebase;
use Service\Landa;

class PengajuanReimbursement extends ModelCore
{
    /**
     * simpan class Landa DB ke variabel #db.
     */
    private $db;

    /**
     * variabel untuk menyimpan nama tabel.
     */
    private $table;

    /**
     * konstruktor memanggil library landa Db.
     */
    public function __construct()
    {
        $this->db = Db::db();
        $this->table = 't_reimbursement';
    }

    /**
     * Ambil semua data pelatihan.
     *
     * @param array  $params
     * @param int    $limit
     * @param int    $offset
     * @param boolean $approvedByMe
     */
    public function getAll($params = [], $limit = 0, $offset = 0, $approvedByMe = false)
    {
        $this->db->select($this->table.'.*,
                t_reimbursement.tgl as tanggal ,
                m_reimbursement.nama as namaReimbursement,
                m_reimbursement.tgl_expired,
                m_reimbursement.bulan_expired, 
                m_reimbursement.is_expired,
                karyawan_data.nama as namaKaryawan,
                karyawan.nik as nik_karyawan,
                m_jabatan.nama as nama_jabatan
            ')
            ->from($this->table)
            ->join('left join', 'm_reimbursement', $this->table.'.m_reimbursement_id = m_reimbursement.id')
            ->join('left join', 'karyawan', $this->table.'.karyawan_id = karyawan.id')
            ->join('left join', 'karyawan_data', 'karyawan.karyawan_data_id = karyawan_data.id')
            ->join('left join', 'k_jabatan', 'karyawan.id = k_jabatan.karyawan_id and k_jabatan.aktif = 1')
            ->join('left join', 'm_jabatan', 'm_jabatan.id = k_jabatan.m_jabatan_id')
            ->where('karyawan.m_perusahaan_id', '=', $_SESSION['user']['m_perusahaan']['id'])

        ;

        if($approvedByMe){
            $this->db->join('join', 't_approval', 't_reimbursement.id = t_approval.reff_id and t_approval.reff_type = "t_reimbursement"')
                    ->andWhere('t_approval.is_aktif', '=', 1)
                    ->andWhere('t_approval.k_approval_id', '=', $_SESSION['user']['userId'])
                    ->andWhere('t_approval.status', '=', 1);
        }

        if (isset($_SESSION['user']['m_perusahaan']['id'])) {
            $this->db->andWhere('m_reimbursement.m_perusahaan_id', '=', $_SESSION['user']['m_perusahaan']['id']);
        }

        // Filter
        if (isset($params) && !is_array($params)) {
            // jika parameter dalam bentuk json
            $filter = (isset($params)) ? (array) json_decode($params) : [];
        } elseif (isset($params) && is_array($params)) {
            $filter = $params;
        }

        // set parameter
        if (isset($filter) && !empty($filter)) {
            foreach ($filter as $key => $val) {
                if (!empty($val || '' != $val)) {
                    if ('id' == $key || 't_reimbursement_id' == $key) {
                        $this->db->where('t_reimbursement.id', '=', $val);
                    } elseif ('m_reimbursement_id' == $key) {
                        $this->db->where('t_reimbursement.m_reimbursement_id', '=', $val);
                    } elseif ('karyawan_id' == $key) {
                        $this->db->where('karyawan_id', '=', $val);
                    } elseif ('kode' == $key) {
                        $this->db->where($this->table.'.kode', 'LIKE', $val);
                    } elseif ('is_approve' == $key) {
                        $this->db->where($this->table.'.is_approve', 'LIKE', $val);
                    } elseif ('status' == $key) {
                        if($approvedByMe){
                            $this->db->where('t_approval.status', '=', $val);                            
                        }
                    }
                }
            }
        }

        // Set limit
        if (isset($limit) && !empty($limit)) {
            $this->db->limit($limit);
        }

        // Set offset
        if (isset($offset) && !empty($offset)) {
            $this->db->offset($offset);
        }

        $this->db->orderBy('created_at DESC');

        $models = $this->db->findAll();
        $totalItem = $this->db->count();
//        foreach ($models as $key => $val) {
//            $models[$key]->tipe_expired = isset($val->tgl_expired) ? '2' : '1';
//            if (isset($val->bulan_expired)) {
//                $monthName = date('F', mktime(0, 0, 0, $val->bulan_expired, 10)); // March
//                $models[$key]->expired_in = isset($val->tgl_expired) ? $val->tgl_expired.' '.$monthName : $val->bulan_expired.' Bulan';
//            }
//            if (isset($val->tipe)) {
//                if (1 == $val->tipe) {
//                    $models[$key]->tipe_saldo = 'Assign';
//                } elseif (2 == $val->tipe) {
//                    $models[$key]->tipe_saldo = 'Update';
//                } else {
//                    $models[$key]->tipe_saldo = 'Expired';
//                }
//            }
//        }

        return [
            'data' => $models,
            'totalItem' => $totalItem,
        ];
    }

    /**
     * Method untuk menyimpan data pelatihan.
     *
     * @param array $data
     * @param array $customParams
     */
    public function save($data, $customParams = '')
    {
        $landa = new Landa();
        $dataModel = $data['model'];
        $list_pengajuan_rem_det = $data['list_pengajuan_rem_det'];
        $list_file = $data['fileUpload'];

        try {
            $this->db->startTransaction();
            if (isset($dataModel['sumber']) && 1 == $dataModel['sumber']) {
                $dataModel['is_approve'] = 1;
            }
            if (!empty($dataModel) && isset($dataModel)) {
                $dataModel['tgl'] = isset($dataModel['tgl']) ? ($landa->arrayToDate($dataModel['tgl'])) : null;
            }
            if (isset($dataModel['id']) && !empty($dataModel['id']) && '' != $dataModel['id']) {
                $model = $this->db->update($this->table, $dataModel, ['id' => $dataModel['id']]);
            } else {
                $kode = $this->generate_kode();
                $dataModel['kode'] = $kode['data'];
                $model = $this->db->insert($this->table, $dataModel);
                // set Approval Line.
                if (2 == $model->sumber || (1 == $model->sumber && $model->karyawan_id == $_SESSION['user']['userId'])) {
                    // Ambil data karyawan
                    $karyawan = new Karyawan();
                    $dataKaryawan = $karyawan->getKaryawan(['karyawan.id' => $model->karyawan_id]);

                    if (isset($dataKaryawan->id)) {
                        // Set data karyawan yang pengajuan
                        $arrKaryawan['karyawan_id'] = $dataKaryawan->id;
                        $arrKaryawan['keterangan'] = 'Mengajukan Reimbursement';
                        $arrKaryawan['m_jabatan_id'] = $dataKaryawan->m_jabatan_id;
                        $arrKaryawan['m_jabatan_level_id'] = $dataKaryawan->m_jabatan_level_id;

                        // Set approval Line
                        $approvalLine = new ApprovalLine();
                        $isApprove = $approvalLine->setApprovalLine($arrKaryawan, 't_reimbursement', $model->id);

                        if ($isApprove['status']) {
                            // Updte status belum approve
                            $this->db->update($this->table, ['is_approve' => 0], ['id' => $model->id]);

                            // kirim notifikasi ke atasan / yang approve
                            if (!empty($isApprove['data'])) {
                                foreach ($isApprove['data'] as $key => $value) {
                                    $firebase = new Firebase();
                                    $firebase->sendNotif('person', 'Pengajuan Reimbursement', 'Ada pengajuan Reimbursement baru', [
                                        'idKaryawan' => $value['idKaryawan'],
                                        'tipe' => 'reimbursement',
                                        'click_action' => 'FLUTTER_NOTIFICATION_CLICK',
                                    ]);
                                }
                            }
                        }
                    }
                }
            }
            if (!empty($model) && isset($data['list_pengajuan_rem_det']) && '' != $data['list_pengajuan_rem_det'] && [] != $data['list_pengajuan_rem_det']) {
                if (isset($dataModel['id']) && !empty($dataModel['id']) && '' != $dataModel['id']) {
                    $this->db->delete('t_reimbursement_det', ['t_reimbursement_id' => $dataModel['id']]);
                }
                $t_reimbursement_id = $model->id;
                foreach ($list_pengajuan_rem_det as $k_Rdet => $v_RDet) {
                    if (isset($dataModel['sumber']) && 1 == $dataModel['sumber']) {
                        $v_RDet['nilai_act'] = $v_RDet['nilai_req'];
                    }
                    $v_RDet['t_reimbursement_id'] = $t_reimbursement_id;
                    $modelRDet = $this->db->insert('t_reimbursement_det', $v_RDet);
                }
            }
            if (!empty($model) && isset($data['fileUpload']) && '' != $data['fileUpload'] && [] != $data['fileUpload']) {
                if (isset($dataModel['id']) && !empty($dataModel['id']) && '' != $dataModel['id']) {
                    $this->db->delete('t_reimbursement_file', ['t_reimbursement_id' => $dataModel['id']]);
                }
                $t_reimbursement_id = $model->id;
                foreach ($list_file as $k_Rfile => $v_RFile) {
                    $v_RFile['nama_file'] = isset($v_RFile['File']) ? $this->saveFile($v_RFile['File']) : $v_RFile['nama_file'];
                    $v_RFile['t_reimbursement_id'] = $t_reimbursement_id;
                    $modelRDet = $this->db->insert('t_reimbursement_file', $v_RFile);
                }
            }
            $this->db->endTransaction();

            return [
                'status' => true,
                //                'data' => $model,
            ];
        } catch (Exception $e) {
            return [
                'status' => false,
                'error' => $e->getMessage(),
            ];
        }
    }

    public function delete($params)
    {
        try {
            $this->db->startTransaction();
            $this->db->delete($this->table, ['id' => $params['id']]);
            $this->db->delete('t_reimbursement_det', ['t_reimbursement_id' => $params['id']]);
            $this->db->delete('t_reimbursement_file', ['t_reimbursement_id' => $params['id']]);
            $this->db->endTransaction();

            return [
                'status' => true,
                'data' => $this->table,
            ];
        } catch (Exception $e) {
            return [
                'status' => false,
                'error' => $e->getMessage(),
            ];
        }
    }

    public function deleteFile($params)
    {
        try {
            $this->db->startTransaction();

            $this->db->delete('t_reimbursement_file', ['t_reimbursement_id' => $params['id']]);

            return [
                'status' => true,
                'data' => 'file',
            ];
        } catch (Exception $e) {
            return [
                'status' => false,
                'error' => $e->getMessage(),
            ];
        }
    }

    /**
     * Validasi data yang dikirim.
     *
     * @param array $data
     * @param array $custom
     */
    public function validasi($data, $custom = [])
    {
        $validasi = [
            'karyawan_id' => 'required',
            'm_reimbursement_id' => 'required',
            'tgl' => 'required',
        ];

        return validate($data, $validasi, $custom);
    }

    public function validasiDetail($data, $custom = [])
    {
        $validasi = [
            'list_pengajuan_rem_det' => 'required',
            'fileUpload' => 'required',
        ];

        return validate($data, $validasi, $custom);
    }

    public function validasiKode($data)
    {
        return parent::validasiKodeCore($data, $this->table);
    }

    public function getDetail($id)
    {
        $this->db->select('*')
            ->from('t_reimbursement_det')
            ->where('t_reimbursement_id', '=', $id)
        ;

        $models = $this->db->findAll();
        $totalItem = $this->db->count();

        return [
            'data' => $models,
            'totalItem' => $totalItem,
        ];
    }

    public function getFile($reff_table, $reff_type, $id, $folder)
    {
        $this->db->select('*')
            ->from($reff_table)
            ->where($reff_type, '=', $id)
        ;

        $models = $this->db->findAll();
        $totalItem = $this->db->count();
        foreach ($models as $key => $val) {
            $models[$key]->fileUrl = config('SITE_URL').'assets/'.$folder.'/'.$val->nama_file;
        }

        return [
            'data' => $models,
            'totalItem' => $totalItem,
        ];
    }

    public function saveFile($params)
    {
        $landa = new Landa();
        if (isset($params['base64']) && !empty($params['base64'])) {
            $path = 'assets/filePengajuanReimbursement/';
            $kode = $this->generate_kode_file();
            $batas = strpos($params['base64'], 'base64,');
            $batas_potong = $batas + 7;
            $file['filename'] = $params['filename'];
            $file['base64'] = substr($params['base64'], $batas_potong);
            $uploadFile = $landa->base64ToFilePath($file, $path, $kode['data']);
            $customnamafile = $uploadFile['data']['fileName'];
            if ($uploadFile['status']) {
                return  $customnamafile;
            }

            return unprocessResponse('gagal', [$uploadFile['error']]);
        }
    }

    public function checkBatasFormula($data, $karyawan_id, $m_reimbursement_id, $tanggal)
    {
        $landa = new Landa();
        $tanggal = isset($tanggal) ? ($landa->arrayToDate($tanggal)) : null;
        $reim = $this->getReimbursementDet($m_reimbursement_id);
        $totalPengajuan = 0;
        $totalSaldo = 0;

        $this->db->select('*,asg_reimbursement_det.nilai')
            ->from('asg_reimbursement')
            ->join('left join', 'asg_reimbursement_det', 'asg_reimbursement.id = asg_reimbursement_det.asg_reimbursement_id')
            ->where('m_reimbursement_id', '=', $m_reimbursement_id)
            ->andWhere('asg_reimbursement_det.karyawan_id', '=', $karyawan_id)
            ->andWhere('asg_reimbursement_det.tgl_mulai', '<=', $tanggal)
            ->orderBy('asg_reimbursement_det.tgl_mulai DESC')
        ;
        if (1 == $reim->is_expired) {
            $this->db->andWhere('asg_reimbursement_det.tgl_selesai', '>=', $tanggal);
        }
        $saldo = $this->db->find();

        if (isset($saldo) && [] != $saldo) {
            $totalSaldo = $saldo->nilai;

            $this->db->select('t_reimbursement.*,t_reimbursement_det.nilai_act')
                ->from('t_reimbursement')
                ->join('left join', 't_reimbursement_det', 't_reimbursement.id = t_reimbursement_det.t_reimbursement_id')
                ->where('m_reimbursement_id', '=', $m_reimbursement_id)
                ->andWhere('is_approve', '!=', 0)
                ->andWhere('karyawan_id', '=', $karyawan_id)
                ->andWhere('t_reimbursement.tgl', '>=', $saldo->tgl_mulai)
            ;
            if (isset($saldo->tgl_selesai) && !empty($saldo->tgl_selesai)) {
                $this->db->andWhere('t_reimbursement.tgl', '<=', $saldo->tgl_selesai);
            }
            $pengajuan = $this->db->findAll();
//            echo json_encode($pengajuan);die();

            $totalPengajuan = 0;
            if (isset($pengajuan) && [] != $pengajuan) {
                foreach ($pengajuan as $key => $value) {
                    @$totalPengajuan += $value->nilai_act;
                }
            }

//            foreach ($saldo as $key => $value) {
//                @$totalSaldo += $value->nilai;
//            }
        }

        $totalReq = 0;
        foreach ($data as $key => $val) {
            @$totalReq += $val['nilai_req'];
        }
        if (1 == $reim->is_unlimited) {
            return [
                'status' => true,
            ];
        }
//        echo json_encode($totalSaldo - $totalPengajuan );die();
        if (($totalReq + $totalPengajuan) > $totalSaldo) {
            return [
                'status' => false,
                'error' => 'Total Pengajuan Melebihi batas Nominal',
            ];
        }

        return [
            'status' => true,
        ];
    }

    public function checkTanggalSaldo($karyawan_id, $m_reimbursement_id, $tanggal)
    {
        $landa = new Landa();
        $tanggal = isset($tanggal) ? ($landa->arrayToDate($tanggal)) : null;
        $reim = $this->getReimbursementDet($m_reimbursement_id);

        $this->db->select('*,asg_reimbursement_det.nilai')
            ->from('asg_reimbursement')
            ->join('left join', 'asg_reimbursement_det', 'asg_reimbursement.id = asg_reimbursement_det.asg_reimbursement_id')
            ->where('m_reimbursement_id', '=', $m_reimbursement_id)
            ->andWhere('asg_reimbursement_det.karyawan_id', '=', $karyawan_id)
            ->andWhere('asg_reimbursement_det.tgl_mulai', '<=', $tanggal)
        ;
        if (isset($reim) && 1 == $reim->is_expired) {
            $this->db->andWhere('asg_reimbursement_det.tgl_selesai', '>=', $tanggal);
        }
        $saldo = $this->db->findAll();
//        echo json_encode($saldo);die();
        if ([] == $saldo || !isset($saldo)) {
            return [
                'status' => false,
                'error' => 'Tanggal Pengajuan tidak tersedia !',
            ];
        }

        return [
            'status' => true,
        ];
    }

    public function generate_kode_file()
    {
        $this->dbModel = Db::db();
        $cekKode = $this->db->select('id')
            ->from($this->table)
            ->orderBy('id DESC')
            ->find()
        ;

        try {
            if ($cekKode) {
                $kode_terakhir = $cekKode->id;
            } else {
                $kode_terakhir = 0;
            }
            $tipe = 'F';
            $kode_item = (substr($kode_terakhir, -4) + 1);
            $kode = substr('0000'.$kode_item, strlen($kode_item));
            $kode = $tipe.$kode;

            return [
                'status' => true,
                'data' => $kode,
            ];
        } catch (Exception $e) {
            return [
                'status' => false,
                'error' => 'Gagal Generate Kode',
            ];
        }
    }

    public function generate_kode()
    {
        $this->dbModel = Db::db();
        $cekKode = $this->db->select('id')
            ->from($this->table)
            ->orderBy('id DESC')
            ->find()
        ;

        try {
            if ($cekKode) {
                $kode_terakhir = $cekKode->id;
            } else {
                $kode_terakhir = 0;
            }
            $tahun = date('y');
            $bulan = date('m');
            $tipe = 'PRM';
            $kode_item = (substr($kode_terakhir, -5) + 1);
            $kode = substr('00000'.$kode_item, strlen($kode_item));
            $kode = $tipe.$tahun.$bulan.$kode;

            return [
                'status' => true,
                'data' => $kode,
            ];
        } catch (Exception $e) {
            return [
                'status' => false,
                'error' => 'Gagal Generate Kode',
            ];
        }
    }

    public function getReimbursementDet($id)
    {
        $this->db->select('*')
            ->from('m_reimbursement')
            ->where('id', '=', $id)
        ;

        return $this->db->find();
    }

    public function getReimbursementPenggajian($params = [])
    {
        $this->db->select($this->table.'.*,t_reimbursement.tgl as tanggal
         ,m_reimbursement.nama as namaReimbursement,m_reimbursement.tgl_expired,
         m_reimbursement.bulan_expired, m_reimbursement.is_expired,karyawan_data.nama as namaKaryawan,
         t_reimbursement_det.nilai_act')
            ->from($this->table)
            ->join('left join', 't_reimbursement_det', $this->table.'.id = t_reimbursement_det.t_reimbursement_id')
            ->join('left join', 'm_reimbursement', $this->table.'.m_reimbursement_id = m_reimbursement.id')
            ->join('left join', 'karyawan', $this->table.'.karyawan_id = karyawan.id')
            ->join('left join', 'karyawan_data', 'karyawan.karyawan_data_id = karyawan_data.id')
            ->where($this->table.'.is_approve', '=', 1)
            ->where($this->table.'.is_dibayar_gaji', '=', 1)
        ;
        if (isset($_SESSION['user']['m_perusahaan']['id'])) {
            $this->db->andWhere('m_reimbursement.m_perusahaan_id', '=', $_SESSION['user']['m_perusahaan']['id']);
        }
        // Filter
        if (isset($params)) {
            if (isset($params['periode_mulai'])) {
                $this->db->where($this->table.'.tgl', '>=', $params['periode_mulai']);
            }
            if (isset($params['periode_selesai'])) {
                $this->db->where($this->table.'.tgl', '<=', $params['periode_selesai']);
            }
        }

        $models = $this->db->findAll();
        $totalItem = $this->db->count();
        $arrKaryawan = [];
        if (isset($models) && $totalItem > 0) {
            foreach ($models as $keys => $val) {
//                $arrKaryawan[$val->karyawan_id]['list'][] = $val;
                $arrKaryawan[$val->karyawan_id]['nama_karyawan'] = $val->namaKaryawan;
                $arrKaryawan[$val->karyawan_id]['id_karyawan'] = $val->karyawan_id;
                if (!isset($arrKaryawan[$val->karyawan_id]['jumlahNilai'])) {
                    $arrKaryawan[$val->karyawan_id]['jumlahNilai'] = 0;
                }
                @$arrKaryawan[$val->karyawan_id]['jumlahNilai'] += $val->nilai_act;
            }
        }

//        if (count($models) > 0) {
//            foreach ($models as $key => $val) {
//                $PengajuanId[] = $val->id;
//            }
//            $this->db->select('t_reimbursement_det.*')
//                ->from('t_reimbursement_det')
//                ->customWhere('t_reimbursement_det.t_reimbursement_id IN('.implode(', ', $PengajuanId).')', 'AND')
//                    ;
//            $karyawanAll = $this->db->findAll();
//            foreach ($models as $key => $val) {
//                foreach ($karyawanAll as $keys => $vals) {
//                    if ($val->id == $vals->t_reimbursement_id) {
//                        $val->detail[] = $vals;
//                    }
//                }
//            }
//        }

        return $arrKaryawan;
    }
}

