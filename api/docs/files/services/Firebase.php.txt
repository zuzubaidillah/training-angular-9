<?php

namespace Service;

use Google\Cloud\Firestore\FirestoreClient;
use Kreait\Firebase\Factory;
use Kreait\Firebase\Messaging\CloudMessage;
use Kreait\Firebase\Messaging\Notification;

/**
 * Class Firebase digunakan untuk service ke firebase.
 */
class Firebase
{
    protected $fdb; // inisialisasi firestore firebase

    protected $name; //inisialisasi collection

    private $fb; //inisialisasi koneksi firebase

    private $firestore; //inisialisasi firebase sdk

    private $auth; //inisialisasi firebase sdk

    private $messaging; //inisialisasi firebase sdk

    public function __construct()
    {
        $this->fb = (new Factory())->withServiceAccount('config/humanis-2020-firebase-adminsdk-5glk8-1e47a8e2a2.json');
        $this->firestore = $this->fb->createFirestore();
        $this->auth = $this->fb->createAuth();
        $this->messaging = $this->fb->createMessaging();
        $this->fdb = new FirestoreClient([
            'projectId' => 'humanis-2020',
        ]);
    }

    /**
     * [sendNotif description].
     *
     * @param [type] $type    [description]
     * @param [type] $title   [description]
     * @param [type] $message [description]
     * @param array  $data    [description]
     *
     * @return [type] [description]
     */
    public function sendNotif($type, $title, $message, $data = [])
    {
        if ('all' == $type) {
            $message = CloudMessage::withTarget('topic', 'all')
                ->withNotification([
                    'title' => $title,
                    'body' => $message,
                    'image' => 'https://app.humanis.id/assets/icons/icon-128x128.png',
                ])
                ->withData($data) // optional
            ;
        } elseif ('company' == $type) {
            $message = CloudMessage::withTarget('topic', 'all_'.$_SESSION['user']['client'])
                ->withNotification([
                    'title' => $title,
                    'body' => $message,
                    'image' => 'https://app.humanis.id/assets/icons/icon-128x128.png',
                ])
                ->withData($data) // optional
            ;
        } elseif ('person' == $type) {
            $message = CloudMessage::withTarget('topic', $data['idKaryawan'])
                ->withNotification(Notification::create($title, $message)) // optional
            ;
        }

        try {
            $send = $this->messaging->send($message);

            return true;
        } catch (Exception $e) {
            return false;
        }
    }

    public function firebaseAuth($email, $password)
    {
        $user = $this->auth->createUserWithEmailAndPassword($email, $password);
        $ambil = $this->auth->getUserByEmail($email);

        return [
            'data' => $ambil,
        ];
    }

    public function firebaseupdateAuth($uid, $email)
    {
        $update = $this->auth->changeUserEmail($uid, $email);

        return [
            'data' => $update,
        ];
    }

    public function subscribeTopic($token, $topik)
    {
        try {
            $subscribe = $this->messaging->subscribeToTopic($topik, $token);

            return [
                'status' => true,
                'data' => $subscribe,
            ];
        } catch (Exception $e) {
            return [
                'status' => false,
                'error' => $e->getMessage(),
            ];
        }
    }

    /**
     * Ambil detail user berdasarkan uid.
     *
     * @return [array]
     */
    public function getUserByUid(string $uid)
    {
        try {
            $user = $this->firestore->database()->collection('users')->document($uid)->snapshot();

            return [
                'status' => true,
                'data' => $user,
            ];
        } catch (Exception $e) {
            return [
                'status' => false,
                'error' => $e->getMessage(),
            ];
        }
    }

    /**
     * Ambil detail client berdasarkan uid.
     *
     * @return [array]
     */
    public function getClientByUid(string $uid)
    {
        try {
            $client = $this->firestore->database()->collection('client')->document($uid)->snapshot();

            return [
                'status' => true,
                'data' => $client,
            ];
        } catch (Exception $e) {
            return [
                'status' => false,
                'error' => $e->getMessage(),
            ];
        }
    }

    /**
     * Ambil Semua klien.
     *
     * @return [array]
     */
    public function getAllClient()
    {
        try {
            $client = $this->firestore->database()->collection('client')->where('is_deleted', '=', false)->documents();
            $arr = [];
            $landa = new Landa();
            foreach ($client as $key => $value) {
                $data = $value->data();
                $arr[$key]['nama'] = $data['nama'];
                $arr[$key]['cp'] = $data['cp'];
                $arr[$key]['email'] = $data['email'];
                $arr[$key]['telepon'] = $data['telepon'];
                $arr[$key]['uid'] = $data['uid'];
                $arr[$key]['db'] = [
                    'DB_HOST' => isset($data['db']['DB_HOST']) ? $landa->unsafeString($data['db']['DB_HOST']) : '',
                    'DB_NAME' => isset($data['db']['DB_NAME']) ? $landa->unsafeString($data['db']['DB_NAME']) : '',
                    'DB_PASS' => isset($data['db']['DB_PASS']) ? $landa->unsafeString($data['db']['DB_PASS']) : '',
                    'DB_USER' => isset($data['db']['DB_USER']) ? $landa->unsafeString($data['db']['DB_USER']) : '',
                ];
            }

            return [
                'status' => true,
                'data' => $arr,
            ];
        } catch (Exception $e) {
            return [
                'status' => false,
                'error' => $e->getMessage(),
            ];
        }
    }

    /**
     * Create new document with data.
     *
     * @return bool|string
     */
    public function newDocument(string $collection, string $uid, array $data = [])
    {
        try {
            if (empty($uid)) {
                $this->fdb->collection($collection)->add($data);
            } else {
                $this->fdb->collection($collection)->document($uid)->create($data);
            }

            return true;
        } catch (Exception $exception) {
            return $exception->getMessage();
        }
    }

    /**
     * Update document with data.
     *
     * @param string $name
     *
     * @return bool|string
     */
    public function updateDocument(string $collection, string $uid, array $data = [])
    {
        try {
            $updateDoc = $this->fdb->collection($collection)->document($uid);
            $arr = [];
            foreach ($data as $key => $value) {
                $arr[] = ['path' => $key, 'value' => $value];
            }
            if (!empty($arr)) {
                $updateDoc->update($arr);
            }

            return true;
        } catch (Exception $exception) {
            return $exception->getMessage();
        }
    }

    /**
     * Drop exists document in collection.
     */
    public function dropDocument(string $name)
    {
        $this->db->collection($collection)->document($name)->delete();
    }

    /**
     * @param string|Uid               $uid
     * @param ClearTextPassword|string $newPassword
     *
     * @throws Exception\AuthException
     * @throws Exception\FirebaseException
     */
    public function changePassword($uid, $newPassword)
    {
        $update = $this->auth->changeUserPassword($uid, $newPassword);

        return [
            'data' => $update,
        ];
    }

    /**
     * Ambil Semua Presensi.
     *
     * @param mixed $idclient
     *
     * @return [array]
     */
    public function getAllPresensi($idclient)
    {
        try {
            $presensi = $this->firestore->database()->collection('presensi')->where('id_client', '=', $idclient)->documents();
            $arr = [];
            $landa = new Landa();
            foreach ($presensi as $key => $value) {
                $data = $value->data();
                $arr[$key]['id_client'] = $data['id_client'];
                $arr[$key]['id_karyawan'] = $data['id_karyawan'];
                $arr[$key]['latitude'] = $data['latitude'];
                $arr[$key]['longitude'] = $data['longitude'];
                // <<<<<<< HEAD
                $arr[$key]['time'] = date('d-M-Y H:i', strtotime($data['time']));
                $arr[$key]['tgl_checklock'] = date('d/m/Y', strtotime($data['tgl_checklock']));
                $arr[$key]['jam'] = $data['jam_checklock'];
                $arr[$key]['uid'] = isset($data['uid']) ? $data['uid'] : '';
                // =======
                // $arr[$key]['time'] = date('d-M-Y H:i', strtotime($data['time']));
                // $arr[$key]['tgl_checklock'] = date('d/m/Y', $data['tgl_checklock']);
                // $arr[$key]['jam_checklock'] = date('H:i:s', $data['jam_checklock']);
                // $arr[$key]['uid'] = isset($data['uid']) ? $data['uid'] : '';
// >>>>>>> 72f649953244f5bcee07786d7ae6c0556a941c74
            }
            // print_r($arr);die;
            return [
                'status' => true,
                'data' => $arr,
            ];
        } catch (Exception $e) {
            return [
                'status' => false,
                'error' => $e->getMessage(),
            ];
        }
    }

    /**
     * Drop exists document in collection.
     */
    public function dropDocumentPresensi(string $uid)
    {
        try {
            // $this->db->collection('presensi')->document($uid)->delete()
            $delete = $this->firestore->database()->collection('presensi')->document($uid)->delete();

            return true;
        } catch (Exception $exception) {
            return $exception->getMessage();
        }
    }
}

